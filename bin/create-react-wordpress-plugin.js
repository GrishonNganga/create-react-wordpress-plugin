#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const mustache = require('mustache');
const inquirer = require('inquirer');

const questions = [
    {
        type: 'input',
        name: 'projectName',
        message: 'Project name:',
        default: 'my-plugin',
        validate: input => {
            const isValid = /^[a-zA-Z0-9-_]+$/.test(input);
            return isValid ? true : 'Project name can only contain letters, numbers, hyphens, and underscores.';
        }
    },
    {
        type: 'input',
        name: 'projectTitle',
        message: 'Project title:',
    },
    {
        type: 'input',
        name: 'projectDescription',
        message: 'Project description:'
    },
    {
        type: 'input',
        name: 'projectAuthor',
        message: 'Author name:'
    },
    {
        type: 'input',
        name: 'packageName',
        message: 'Package name',
        default: 'default-package',
    },
    {
        type: 'input',
        name: 'tailwindPrefix',
        message: 'TailwindCSS prefix',
        default: 'tw-',
        validate: input => input ? true : 'Tailwind CSS prefix required'
    }
];
inquirer.prompt(questions).then(answers => {
    const { projectName, description, author } = answers;

    const templateDir = path.resolve(__dirname, '../template');
    const autogenerateDir = path.resolve(__dirname, '../template/autogenerate');
    const templateSrcDir = path.resolve(__dirname, '../template/src');
    const targetDir = path.resolve(process.cwd(), projectName);
    const targetSrcDir = path.resolve(process.cwd(), projectName + "/src/" + projectName);

    if (fs.existsSync(targetDir)) {
        console.error(`A directory with the name "${projectName}" already exists. Please choose a different name.`);
        process.exit(1);
    }

    fs.mkdirSync(targetDir);

    //Creates all the autogenerated files
    fs.readdirSync(autogenerateDir).forEach(file => {
        const template = fs.readFileSync(path.join(autogenerateDir, file), 'utf8');
        const content = mustache.render(template, answers);
        fs.writeFileSync(path.join(targetDir, file), content, 'utf8');
    });

    //Create entryfile
    const entryFileTemplate = fs.readFileSync(path.join(templateDir, 'entryfile.php'), 'utf8');
    const entryFile = mustache.render(entryFileTemplate, answers)
    fs.writeFileSync(path.join(targetDir, `${projectName}.php`), entryFile, 'utf8');

    //Create src/ folder
    if (!fs.existsSync(targetSrcDir)) {
        fs.mkdirSync(targetSrcDir, { recursive: true });
    }

    fs.readdirSync(templateSrcDir).forEach(file => {
        const template = fs.readFileSync(path.join(templateSrcDir, file), 'utf8');
        const content = mustache.render(template, answers);
        fs.writeFileSync(path.join(targetSrcDir, file), content, 'utf8');
    });

    console.log(`Project ${projectName} created successfully.`);
}).catch(error => {
    console.error('Error:', error);
});